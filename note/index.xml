<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Заметки | MrFroll</title>
    <link>https://mrfroll.com/note/</link>
      <atom:link href="https://mrfroll.com/note/index.xml" rel="self" type="application/rss+xml" />
    <description>Заметки</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru</language><lastBuildDate>Tue, 19 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mrfroll.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Заметки</title>
      <link>https://mrfroll.com/note/</link>
    </image>
    
    <item>
      <title>Feedhandler: разбиение на микросервисы</title>
      <link>https://mrfroll.com/note/feedhandler-microservices-decomposition/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://mrfroll.com/note/feedhandler-microservices-decomposition/</guid>
      <description>&lt;p&gt;Я начал работы по разбиению монолита &lt;a href=&#34;https://feedhandler.ru&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;feedhandler.ru&lt;/a&gt; на микросервисы. Или просто сервисы, если будет угодно.&lt;/p&gt;
&lt;p&gt;На &lt;a href=&#34;https://mrfroll.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mrfroll.com&lt;/a&gt; я планирую периодически рассказывать как идут дела в этом направлении и делиться инсайтами. Соответствующие заметки буду помечать новым тегом &lt;a href=&#34;https://mrfroll.com/tags/into-microservices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;into microservices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В статье на Хабре &lt;a href=&#34;https://habr.com/ru/post/522994/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Чему я научился, пока писал свой агрегатор цен на игры&amp;rdquo;&lt;/a&gt; я рассказал, что FeedHandler - это вот такой монолит:














&lt;figure  id=&#34;figure-старая-схема-feedhandlerru&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./img/before.png&#34; alt=&#34;Старая схема Feedhandler.ru&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Старая схема Feedhandler.ru
    &lt;/figcaption&gt;&lt;/figure&gt;
Если кратко, то он состоит из двух приложений:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt; &amp;ndash; огромный java-монолит, приложение, которое делает все: собирает данные из PlayStation Store и сохраняет их, строит отчеты, отдает json в UI feedhandler и даже создает sitemap.xml файл;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI&lt;/strong&gt; &amp;ndash; вьюха написанная на Nuxt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Вначале такая архитектура позволила ускорить разработку, но за два года существования продукта стало страшно вносить в этот монолит даже небольшие изменения. Релизы стали дорогими так как изменения требуют деплоить backend целиком.&lt;/p&gt;
&lt;p&gt;Декомпозицию проекта на микросервисы должна решить эти проблемы. Как бонус можно придумывать безумные названия для этих сервисов.&lt;/p&gt;
&lt;p&gt;Планируется поэтапная работа &amp;ndash; следующая контрольная точка будет выглядить следующим образом:&lt;/p&gt;














&lt;figure  id=&#34;figure-новая-схема-feedhandlerru&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./img/after.png&#34; alt=&#34;Новая схема Feedhandler.ru&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Новая схема Feedhandler.ru
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Здесь стрелки указывают поток информации. Сервисы на схеме выполняют следующие функции:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trakt&lt;/strong&gt; &amp;ndash; забирает сырые данные из PlayStation Store и помещает их в Postgres-хранилище;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pricer&lt;/strong&gt; &amp;ndash; забирает сырые данные из Postgres-хранилища, вытаскивает из них цены и сбрасывает эти данные в MongoDB-хранилище цен;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gortto&lt;/strong&gt; &amp;ndash; сервис аутентификации и авторизации пользователя;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tresury&lt;/strong&gt; &amp;ndash; отдает цены на сайт feedhandler.ru.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Из этой схемы в продакшн вышел только Tresury, остальные сервисы в процессе разработки, но это только начало.&lt;/p&gt;
&lt;p&gt;Я хочу достичь следующих целей:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;проще и безопасней деплоить: маленький сервис, видно, что делает, подкрутил и поехали;&lt;/li&gt;
&lt;li&gt;отказоустойчивость: баги будут изолированы друг от друга сервисами;&lt;/li&gt;
&lt;li&gt;масштабируемость: чтобы раздавать на сайт json можно запустить пару инстансов соответствующих сервисов.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Я ожидаю следующие проблемы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;вероятно, периодически буду забывать какой сервис за что отвечает;&lt;/li&gt;
&lt;li&gt;надо срочно разворачивать ekl, не знаю как без него буду разбирать сложные проблемы;&lt;/li&gt;
&lt;li&gt;думаю столкнусь с ситуацией когда на стыке сервисов получу несоответствие моделей.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Используемые на данном этапе инструменты:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Cloud Gateway - как API Gateway;&lt;/li&gt;
&lt;li&gt;Eureka - в качестве Discovery Service;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Reduce GRG</title>
      <link>https://mrfroll.com/note/reduce-grg/</link>
      <pubDate>Mon, 27 Jan 2020 10:38:54 +0000</pubDate>
      <guid>https://mrfroll.com/note/reduce-grg/</guid>
      <description>&lt;p&gt;Reduce-GRG is a docker image with mathematical packages to make theoretical physics calculation (General Relativity and some post-Einstein theories). You can find it on my dockerhub page here &lt;a href=&#34;https://hub.docker.com/repository/docker/mrfroll/reduce-grg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mrfroll/reduce-grg&lt;/a&gt;
It consist of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://reduce-algebra.sourceforge.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;REDUCE&lt;/a&gt; system for general mathematics calculation;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reduce-algebra.sourceforge.io/grg32/grg32.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GRG 3.2&lt;/a&gt; for calculation with physics abstractions in exterior form formalism.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I believe that this image make life a little easier. To run container on you computer you have to have only docker. Then you will get all advantages of isolation with it. You don&amp;rsquo;t need to have any specific environment to run REDUCE with GRG.&lt;/p&gt;
&lt;p&gt;To run REDUCE just execute in command-line to run &lt;code&gt;v0.1&lt;/code&gt; of reduce-grg&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -ti mrfroll/reduce-grg:v0.1 redpsl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any way, you still can install REDUCE and GRG manually. Just check this page for further instructions &lt;a href=&#34;https://mrfroll.com/post/reduce-and-grg-installations-on-ubuntu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reduce and GRG Installations on Ubuntu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would be appreciate for any contribution and comments related to this post. Dockerfile and all other source code are available on my github page &lt;a href=&#34;https://github.com/MrFroll/reduce-grg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MrFroll/reduce-grg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reduce and GRG Installations on Ubuntu</title>
      <link>https://mrfroll.com/note/reduce-and-grg-installations-on-ubuntu/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://mrfroll.com/note/reduce-and-grg-installations-on-ubuntu/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reduce-algebra.com/grg32/grg32.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GRG&lt;/a&gt; is the computer algebra system witch was designed to make calculation in differential geometry and field theory as simple and natural as possible. It’s is based on the computer algebra system &lt;a href=&#34;http://reduce-algebra.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;REDUCE&lt;/a&gt;. Despite the fact that this program was the creation in the nineties at the present time it remains relevant. Unfortunately you can’t find it in standard repositories of Ubuntu or other popular Linux distributives. But you can install it from sources without any problems.&lt;/p&gt;
&lt;p&gt;Mainly the installation process is pretty simple. All instructions are available on Obtaining REDUCE from &lt;a href=&#34;http://reduce-algebra.com/downloading.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SourceForge&lt;/a&gt; page and in the grg documentation. The main target of this post is an advertisement of the good and strong tool for physicists.&lt;/p&gt;
&lt;p&gt;First of all you need to install &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;`$ sudo apt update
$ sudo apt install wget
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then you should download REDUCE deb package and GRG tar.gz archive. I used &lt;code&gt;deb&lt;/code&gt; snapshot package from 2019-01-20. I believe you can use the last snapshot instead. It seems that there is no one golden source for this package now but you can find it on official Reduce site &lt;a href=&#34;http://reduce-algebra.com/grg32.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://reduce-algebra.com/grg32.htm&lt;/a&gt;. It&amp;rsquo;s up to you what source you are going to use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://sourceforge.net/projects/reduce-algebra/files/snapshot_2019-01-20/linux64/reduce-complete_4865_amd64.deb/download -O ~/reduce-complete_4865_amd64.deb

$ wget &#39;http://www.reduce-algebra.com/grg32/grg32r6.tar.gz&#39; -O ~/grg32r6.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install Reduce with all dependencies you can run command&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt install ./reduce-complete_4865_amd64.deb
$ rm reduce-complete_4865_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s a good idea to check reduce have been compiled correctly&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ reduce

Reduce (Free PSL version), 5-Jul-2013 ...
1:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you see something like this your compilation is ok.
Now it’s time to add GRG in the reduce equipment&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ~/
$ mkdir grg &amp;amp; tar xfz grg32r6.tgz -C grg
$ cd grg
$ reduce
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the reduce command line we start compilation by&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1: in &amp;quot;compile.grg&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if finally you have something like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GRG has been compiled.
Move all created grg*.b files in the $reduce/fasl
directory or keep them in your working directory.
nil

Quitting.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that’s ok.&lt;/p&gt;
&lt;p&gt;Now we should follow the advise&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mv *.b /opt/reduce/trunk/pslbuild/i686-unknown-ubuntu13.04/red/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and check that GRG was compiled correctly&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ reduce
1: load grg;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the good reaction is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;This is GRG 3.2 release 6 (July 16, 2000) ...
System variables are lower-cased: e i pi sin ...
Dimension is 4 with Signature (-,+,+,+)

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to see how it works we can start &lt;code&gt;bondi.low&lt;/code&gt; example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; &amp;quot;bondi.low&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it must return file bondi.out in your current directory. This file contain results of evaluation of the commands from bondi.low file. Then we can remove files witch we don’t need any more.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm grg*.sl *.csl *.psl compile.grg *.red *.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that we have a directory &lt;code&gt;/opt/reduce/&lt;/code&gt; with reduce and grg and a directory &lt;code&gt;$HOME/grg/&lt;/code&gt; with examples. We have &lt;code&gt;/usr/bin/reduce&lt;/code&gt; symlink to have access to reduce from any directories.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
